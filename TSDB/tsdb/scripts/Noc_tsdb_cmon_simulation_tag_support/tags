!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFF_SIZE	flow.c	286;"	d	file:
CUSTOM_MONITOR	flow_util.h	4;"	d
DVM_MONITOR	flow_util.h	5;"	d
FlowReturn	runlogic.c	/^typedef void FlowReturn;$/;"	t	file:
GDF_DELTA_ENTRIES	flow_util.h	3;"	d
MAX_SIZE	flow_util.h	2;"	d
SLEEP_INTERVAL	flow_util.h	1;"	d
addInterval	flow_util.h	/^  int addInterval;\/\/ In seconds$/;"	m	struct:gdf_data
create_gdf_table_entry	flow_util.c	/^int create_gdf_table_entry(int *row_num, int *max_gdf_entries, int *total_gdf_entries, char **ptr)$/;"	f
curr_time	flow_util.h	/^  long curr_time;$/;"	m	struct:gdf_data
data	flow_util.h	/^  char data[12];$/;"	m	struct:vector
debug_level	flow_util.c	/^int debug_level = 1;$/;"	v
decode	flow_util.c	/^char *decode(char *input)$/;"	f
delInterval	flow_util.h	/^  int delInterval; \/\/In seconds$/;"	m	struct:gdf_data
dump_gdf_struct_info	flow_util.c	/^void dump_gdf_struct_info(gdf_data *gdf_data_struct, int total_gdf_entries)$/;"	f
exit_script	exit_script.c	/^int exit_script()$/;"	f
fill_gdf_data	flow_util.c	/^int fill_gdf_data(gdf_data **gdf_data_struct, char *gdf_name, int mon_id, int *total_gdf_entries, int *max_gdf_entries, int frequency)$/;"	f
flow	flow.c	/^void flow()$/;"	f
frequency	flow_util.h	/^  int frequency;$/;"	m	struct:gdf_data
gdf_data	flow_util.h	/^typedef struct gdf_data$/;"	s
gdf_data	flow_util.h	/^}gdf_data;$/;"	t	typeref:struct:gdf_data
gdf_name	flow_util.h	/^  char gdf_name[256];$/;"	m	struct:gdf_data
gen_random_val	flow_util.c	/^float gen_random_val(float minVal, float maxVal)$/;"	f
get_custom_monitor_data	flow_util.c	/^void get_custom_monitor_data (gdf_data *gdf_data_struct_tmp, char *outBuff, int *len)$/;"	f
get_dvm_monitor_data	flow_util.c	/^void get_dvm_monitor_data (gdf_data *gdf_data_struct_tmp, char *outBuff, int *len)$/;"	f
get_server_ip_name	flow_util.c	/^void get_server_ip_name(char *server_ip, char *server_name, char *tier_name, char *cmon_pid)$/;"	f
get_tokens_with_multi_delimiter	flow_util.c	/^int get_tokens_with_multi_delimiter(char *read_buf, char *fields[], char *token, int max_flds)$/;"	f
init_script	init_script.c	/^int init_script()$/;"	f
initialize_variable	flow_util.c	/^void initialize_variable()$/;"	f
last_time_data_sent	flow_util.h	/^  long last_time_data_sent;$/;"	m	struct:gdf_data
make_control_conn_with_ndc	flow.c	/^int make_control_conn_with_ndc(char *ndc_ip,  char *ndc_port)$/;"	f
make_data_conn_with_ndc	flow.c	/^int make_data_conn_with_ndc(char *ndc_ip, char *ndc_port)$/;"	f
make_monitor_data	flow_util.c	/^void make_monitor_data(gdf_data *gdf_data_struct, char *buffer, int total_gdf_entries)$/;"	f
maxData	flow_util.h	/^  float maxData[230];$/;"	m	struct:gdf_data
maxVectors	flow_util.h	/^  int maxVectors;$/;"	m	struct:gdf_data
minData	flow_util.h	/^  float minData[230];$/;"	m	struct:gdf_data
minVectors	flow_util.h	/^  int minVectors;$/;"	m	struct:gdf_data
mon_id	flow_util.h	/^  int mon_id;$/;"	m	struct:gdf_data
monitor_type	flow_util.h	/^  int monitor_type;$/;"	m	struct:gdf_data
nslb_get_cur_date_time	flow.c	/^char *nslb_get_cur_date_time(char *time_string, int need_to_block_signal)$/;"	f
numOfElement	flow_util.h	/^  int numOfElement;$/;"	m	struct:gdf_data
numvectors	flow_util.h	/^  int numvectors;$/;"	m	struct:gdf_data
parse_hb_response_message	flow_util.c	/^int parse_hb_response_message(char *recd_msg, int recd_msg_size, gdf_data **gdf_data_struct, int *total_gdf_entries, int *max_gdf_entries, int *testidx)$/;"	f
read_msg_from_ndc_on_ctrl_conn	flow_util.c	/^void read_msg_from_ndc_on_ctrl_conn(char *resp_body, char *msg_type, int *resp_size)$/;"	f
runlogic	runlogic.c	/^void runlogic()$/;"	f
send_control_conn_request_to_ndc	flow.c	/^int send_control_conn_request_to_ndc(char *server_ip, char *server_name, char *tier_name, char *cmon_version)$/;"	f
send_data_conn_request_to_ndc	flow.c	/^int send_data_conn_request_to_ndc(int testidx, char *server_ip, char *server_name, char *tier_name, char *cmon_version)$/;"	f
send_monitor_data_to_ndc_on_data_conn	flow.c	/^int send_monitor_data_to_ndc_on_data_conn(char *data)$/;"	f
send_msg_to_ndc_on_control_connection	flow.c	/^int send_msg_to_ndc_on_control_connection(char *msg, char *msg_type)$/;"	f
slot_used	flow_util.h	/^  int slot_used;$/;"	m	struct:gdf_data
sock_cmon	sock_cmon.c	/^void sock_cmon()$/;"	f
time_factor	flow_util.c	/^double time_factor;$/;"	v
vec	flow_util.h	/^  vector *vec;$/;"	m	struct:gdf_data
vecName	flow_util.h	/^  char vecName[256];$/;"	m	struct:vector
vec_prefix	flow_util.h	/^  char vec_prefix[128];$/;"	m	struct:gdf_data
vector	flow_util.h	/^typedef struct vector$/;"	s
vector	flow_util.h	/^}vector;$/;"	t	typeref:struct:vector
