#include <stdlib.h>
#include <sched.h>
#include <string.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <time.h>
#include <errno.h>
#include <pthread.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdint.h>

#include "tsdb_msg_interface.h"
//#include "tsdb_data_query.h"
//#include "tsdb_data_call_util.c"
#include "tsdb_id.h"
#define NUM_DF 6

static Condition_type_th_t cond_ty_threshold[7] = {{0,0,2,6,1,1,0,0,0,1,0},   //Fixed Average
                                                   {1,0,3,8,1,2,1,0,0,1,0},   //Fixed SUM OF EVERY
                                                   {2,0,3.2,99.7,92.1,97.5,1,0,67.8,1,2},   //Fixed MAXIMUM
                                                   {3,0,3.2,99.7,92.1,97.5,1,0,67.8,1,3},   //Fixed MINIMUM
                                                   {4,0,3.2,99.7,92.1,97.5,1,0,67.8,1,4},   //Fixed ANY ONE
                                                   {5,0,10.2,99.7,92.1,97.5,1,0,100.0,1,0}, //Fixed Every-Last
                                                   {5,0,3.2,99.7,92.1,97.5,1,1,30.2,1,1},   //Fixed Every-Any
						  };
//static Condition_type_th_t cond_ty_threshold[1] = {{0,0,0,1,1,1,1,0,0,1,0}};
static Condition_type_change_t cond_ty_change[1] = {{0,0,0,0.0,0.0,0.0,0.0,0,0,0.0,0,0,0,0}};
static Condition_type_anomaly_t cond_ty_anomaly[1] = {{4,0,5,0,0,0,0.8,0,2}};
static Condition_type_outlier_t cond_ty_outlier[1] = {{0,0,67.8,5,0,1,0,0.3}};
static Condition_type_forec_t cond_ty_forec[1] = {{0,0,5,0,0,5,0,0,67.8,0,0,3.2,99.7,92.1,97.5}};

int get_tokens(char *read_buf, char *fields[], char *token, int max_flds)
{
  int totalFlds = 0;
  char *ptr;
  char *token_ptr = NULL;

  ptr = read_buf;
  while((token_ptr = strtok(ptr, token)) != NULL)
  {
    ptr = NULL;
    totalFlds++;
    if(totalFlds > max_flds)
    {
      //fprintf(stderr, "Total fields are more than max fields (%d), remaining fields are ignored\n", max_flds);
      totalFlds = max_flds;
      break;  /* break from while */
    }
    fields[totalFlds - 1] = token_ptr;
  }
  return(totalFlds);
}

//---------------------------------
#define SUBJECT 0
#define MEASURE 1

int fill_subject_or_measure(void* ptr, char* path, int g_mg_t, int g_mt_t, int flag, int flag2, TSDBDataCall *tsdb_dc_ptr)
{
  long n_bytes = (long)ptr;

  char *fields [10];
  uint8_t no_tokens = get_tokens(path, fields, ">",  10);

  uint8_t len;
  char *type;
  char *val;
  char mode;
  
  int id = {0, g_mg_t, g_mt_t};
  
  if(flag == SUBJECT)
    {
      tsdb_dc_ptr->hierachy_levels = no_tokens;
      tsdb_dc_ptr->sub_mem_count = no_tokens;
    }
  if(flag == MEASURE)
    tsdb_dc_ptr->measure_mem_count = no_tokens;
  memcpy(ptr, &no_tokens, 1);
  ptr++;


  if(flag == SUBJECT)
    tsdb_dc_ptr->hierachy_levels = no_tokens;

  for(int i = 0; i < no_tokens; i++)
  {
     type = fields[i]; //customer:default
     val = strchr(fields[i], ':');
     *val = '\0';
  
     len = strlen(type) + 1;
     memcpy(ptr, &len, 1);
     ptr += 1;
     memcpy(ptr, type, len);
     ptr += len;
     
     val++;

     //Added to make last subject value as All and last -1 value as '*' to test Exact/All/Pattern with same data file
     if((flag == SUBJECT) && (i == (no_tokens - 1) || i == (no_tokens - 2) || i == (no_tokens - 3)) && (tsdb_dc_ptr->subject_mode == SUBJECT_MODE_ALL))
       val = "All";  
     else if((flag == SUBJECT) && (i == (no_tokens - 2)) && (tsdb_dc_ptr->subject_mode == SUBJECT_MODE_PATTERN))
       val = "*";

     len = strlen(val) + 1;
  
     memcpy(ptr, &len, 1);
     ptr += 1;
     memcpy(ptr, val, len);
     ptr += len;
     
     uint8_t mode = S_MODE_SAME;

    if(flag == SUBJECT)
    {
      if(strcasecmp(val, "all") == 0)
        mode = S_MODE_ALL;

      if(val[len - 2] == '*')
        mode = S_MODE_PATTERN;

      memcpy(ptr, &mode, 1);
      ptr += 1;
    }
    else if(flag == MEASURE)
    {
      memcpy(ptr, &id, 4);
      ptr += 4;
    }
  #ifdef TSDB_QUERY_LOGGING
    fprintf(query_log_fp, "Subject[%d]>%s>%d\n",i , val, mode);
   #endif 
  }

  return (long)ptr - n_bytes; // to how many bytes it consumed 
}

int create_req_for_alert_data_call(TSDBDataCall *tsdb_dc_ptr)
{
  int mins_back = 10;
  int mins_duration = 10;

  char start_tm_buff[128] = "\0";
  char end_tm_buff[128] = "\0";
  struct tm local_tm1, local_tm2;

  memset(&local_tm1, 0, sizeof(struct tm));
  memset(&local_tm2, 0, sizeof(struct tm));

  localtime_r((time_t *)&tsdb_dc_ptr->start_ts, &local_tm1);
  strftime(start_tm_buff, 128, "%T %D", &local_tm1);

  int end_ts = tsdb_dc_ptr->end_ts;
  if(end_ts == 0)
    end_ts=time(NULL);
  localtime_r((time_t *)&end_ts, &local_tm2);
  strftime(end_tm_buff, 128, "%T %D", &local_tm2);

  #ifdef TSDB_QUERY_LOGGING
  fprintf(query_log_fp, "\n\nCreating request for. freq: %d, time_period = %s, start_ts: %d, end_ts: %d\n", tsdb_dc_ptr->req_freq,
                         time_period[tsdb_dc_ptr->time_period], tsdb_dc_ptr->start_ts, tsdb_dc_ptr->end_ts);
  fprintf(query_log_fp, "start_time: %s, end_time: %s\n", start_tm_buff, end_tm_buff);
  fprintf(query_log_fp, "Number of metrics: %d\n\n", tsdb_dc_ptr->req_num_metrics);
  #endif

  //time_t s_time = time(NULL) - (mins_back * 60);
  //time_t e_time;
  //if(mins_duration == 0)
  //e_time = 0;
  //else
  //e_time = s_time + mins_duration * 60;

  int total_size = sizeof(TSDB_Req_Alert_Rule_config_t);
  TSDB_Req_Alert_Rule_config_t *req = (TSDB_Req_Alert_Rule_config_t *) tsdb_dc_ptr->buffer;
  req->msg_hdr.opcode = TSDB_QUERY_REQ_ALERT_RULE_CONFIG;
  req->operation = atoi(ns_eval_string("{ALERT_OPEARTION}"));
  req->flags = 0;
  req->number_of_rules = atoi(ns_eval_string("{ALERT_NUM_OF_RULES}"));

  int rule_id = 3;
  uint8_t rule_name_len = 9;
  char rule_name[128] = "cpu_Rule";
  uint8_t rule_flag = 1;
  int time_win = 60; //time window
  int chk_sts_time = 300; //check status time
  uint8_t grp_len = 6;
  char grp_name[] = "Alert";
  uint8_t n_schedules = atoi(ns_eval_string("{Num_schedules}"));
  uint8_t schedule_type = atoi(ns_eval_string("{schedule_type}"));
  uint8_t num_mt = atoi(ns_eval_string("{MetricCount}"));;
  uint8_t mt_attr = atoi(ns_eval_string("{ALERT_MT_ATTR}"));
  uint8_t mt_name_len = 2;
  char mt_name[] = "A";
  char mt_name_b[] = "B";
  uint16_t num_sub = 1;
  uint8_t num_serv = atoi(ns_eval_string("{Num_Severity}"));
  uint8_t sever_type[3] = {1, 2, 3};
  uint8_t num_cond = atoi(ns_eval_string("{num_cond}"));
  uint8_t cond_exp_len = 3;
  //char cond_exp_name[128] = "C1 && C2";
  char cond_exp_name[128] = "C0";
  uint8_t cond_name_len = 3;
  uint8_t mname_len = 2;
  char mname[128] = "A";
  uint8_t cond_type = atoi(ns_eval_string("{cond_type}"));

  void *var_data = req->var_data;
  for(int i = 0; i < req->number_of_rules; i++)
  {
    REQ_PARSE(var_data, &rule_id, 4, total_size)
    REQ_PARSE(var_data, &rule_name_len, 1, total_size)
    REQ_PARSE(var_data, rule_name, rule_name_len, total_size)
    REQ_PARSE(var_data, &rule_flag, 1, total_size)
    REQ_PARSE(var_data, &time_win, 4, total_size)
    REQ_PARSE(var_data, &chk_sts_time, 4, total_size)
    REQ_PARSE(var_data, &grp_len, 1, total_size)

    //#if 0
    REQ_PARSE(var_data, grp_name, grp_len, total_size)
    //#endif

    REQ_PARSE(var_data, &n_schedules, 1, total_size)

    for(int j = 0; j < n_schedules; j++)
    {
      if(schedule_type > 9 || schedule_type < 0)
      {
        printf("Schedule type is incorrect. [Give the value 0-9]\n");
        exit(1);
      }
      REQ_PARSE(var_data, &schedule_type, 1, total_size)
      REQ_PARSE(var_data, &schedule_type_arr[schedule_type].mon, 1, total_size)
      REQ_PARSE(var_data, &schedule_type_arr[schedule_type].week, 1, total_size)
      REQ_PARSE(var_data, &schedule_type_arr[schedule_type].day, 1, total_size)
      REQ_PARSE(var_data, &schedule_type_arr[schedule_type].s_time, 8, total_size)
      REQ_PARSE(var_data, &schedule_type_arr[schedule_type].e_time, 8, total_size)
    }
    REQ_PARSE(var_data, &num_mt, 1, total_size)

    for(int k = 0; k < num_mt; k++)
    {
      //#if 0
      if(mt_attr < 0 || mt_attr > 3)
      {
	printf("Metric Attribute is incorrect. [Give the value 0-3]\n");
        exit(1);
      }

      REQ_PARSE(var_data, &mt_attr, 1, total_size)
      REQ_PARSE(var_data, &mt_name_len, 1, total_size)
      //#endif
      if(k == 0)
	REQ_PARSE(var_data, mt_name, mt_name_len, total_size)
      else if(k == 1)
        REQ_PARSE(var_data, mt_name_b, mt_name_len, total_size)

      ns_advance_param("subject");
      char subject_string[256] ;//= Tier:cprod-*; 
      strcpy(subject_string, ns_eval_string("{subject}"));
#ifdef TSDB_QUERY_LOGGING
      fprintf(query_log_fp,"Subject: %s\n", subject_string);
#endif

      char measure_string[256] ;//= Tier:cprod-*; 
      int g_mg_t = atoi(ns_eval_string("{GDF_ID}"));
      int g_mt_t = atoi(ns_eval_string("{Graph_ID}"));
      strcpy(measure_string, ns_eval_string("{measure}"));
#ifdef TSDB_QUERY_LOGGING
      fprintf(query_log_fp,"Measure: %s and GDF_ID: %d Graph ID: %d\n", measure_string, g_mg_t, g_mt_t);
#endif

      int size = fill_subject_or_measure(var_data, measure_string, g_mg_t, g_mt_t, MEASURE, 0, tsdb_dc_ptr);
      var_data += size;
      total_size += size;

      REQ_PARSE(var_data, &num_sub, 2, total_size)

      size = fill_subject_or_measure(var_data, subject_string, 0, 0, SUBJECT, 0, tsdb_dc_ptr);
      var_data += size;
      total_size += size;
    }
    REQ_PARSE(var_data, &num_serv, 1, total_size)

    for(int m = 0; m < num_serv; m++)
    {
      if(sever_type[m] > 3 || sever_type[m] <= 0)
      {
        fprintf(query_log_fp,"Severity type is incorrect. [Give the value 1-3]\n");
        exit(1);
      }

      REQ_PARSE(var_data, &sever_type[m], 1, total_size)
      REQ_PARSE(var_data, &cond_exp_len, 1, total_size)
      REQ_PARSE(var_data, cond_exp_name, cond_exp_len, total_size)
      REQ_PARSE(var_data, &num_cond, 1, total_size)

      for(int n = 0; n < num_cond; n++)
      {
        REQ_PARSE(var_data, &n, 1, total_size)                     //CONDITION ID	
        REQ_PARSE(var_data, &cond_name_len, 1, total_size)

	char name[16];
	sprintf(name, "C%d", n);
        REQ_PARSE(var_data, name, cond_name_len, total_size)
        REQ_PARSE(var_data, &mname_len, 1, total_size)
        REQ_PARSE(var_data, mname, mname_len, total_size)
        REQ_PARSE(var_data, &cond_type, 1, total_size)

	if(cond_type > 5 || cond_type < 0)
	{ 
          printf("Condition type is incorrect. [Give the value 0-5]\n");
	  exit(1);
	} 
	if(cond_type == 0)
	{
	  REQ_PARSE(var_data, &cond_ty_threshold[n].metric_data, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_threshold[n].operators, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].fthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].sthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].r_fthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].r_sthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].window_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].pct_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].sample_pct, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].window, 2, total_size)
	  REQ_PARSE(var_data, &cond_ty_threshold[n].window_unit, 1, total_size)
	}
	else if(cond_type == 1)
	{
          REQ_PARSE(var_data, &cond_ty_change[0].metric_data, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_change[0].operators, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].change, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].fthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].sthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].r_fthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].r_sthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].window_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].pct_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].sample_pct, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].window, 2, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].window_unit, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].past_window, 2, total_size)
	  REQ_PARSE(var_data, &cond_ty_change[0].past_window_unit, 1, total_size)
	}
	else if(cond_type == 2)
	{
          REQ_PARSE(var_data, &cond_ty_anomaly[n].metric_data, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_anomaly[n].operators, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].window, 2, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].window_unit, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].window_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].pct_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].sample_pct, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].anomaly_algo_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_anomaly[n].deviations, 8, total_size)
	}
	else if(cond_type == 3)
	{
          REQ_PARSE(var_data, &cond_ty_outlier[0].metric_data, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].pct_type, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].sample_pct, 8, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].window, 2, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].window_unit, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].window_type, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].algo_type, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_outlier[0].tolerance, 8, total_size)
	}
	else
	{
          REQ_PARSE(var_data, &cond_ty_forec[n].metric_data, 1, total_size)
          REQ_PARSE(var_data, &cond_ty_forec[n].operators, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].window, 2, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].window_unit, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].window_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].trend_window, 2, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].trend_window_unit, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].sample_pct, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].model, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].forecast_type, 1, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].fthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].sthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].r_fthreshold, 8, total_size)
	  REQ_PARSE(var_data, &cond_ty_forec[n].r_sthreshold, 8, total_size)
	} 
      }
    }
  }

  req->msg_hdr.msg_size = total_size - 4;
  return total_size;
}

void script_parse_alert_resp(void *buffer, int opcode)
{
  TSDB_Resp_Alert_Config_t *resp = (TSDB_Resp_Alert_Config_t*)(buffer);
  #ifdef TSDB_QUERY_LOGGING
  fprintf(query_log_fp, "Msg hdr opcode: %d, partition_info = %d\n", resp->msg_hdr.opcode, resp->msg_hdr.flags);
  fprintf(query_log_fp, "RT Hdr. qhead_rt: %d, tsdb_nodes: %d\n", resp->rt_hdr.qhead_rt, resp->rt_hdr.tsdb_nodes);
  fprintf(query_log_fp, "Message Length: %d, Detailed Message Length: %d\n", resp->msg_len, resp->detail_msg_len);
  #endif

  void *ptr = resp->var_data;
  long sz = (long)ptr;
  for(int i = 0; i < resp->rt_hdr.tsdb_nodes; ++i)
  {
    short *tsdb_id = (short *)ptr;
    ptr += 2;
    int *tsdb_rt = (int *)ptr;
    ptr += 4;

    #ifdef TSDB_QUERY_LOGGING
      fprintf(query_log_fp, "tsdb_id: %d, tsdb_rt: %d\n\n", *tsdb_id, *tsdb_rt);
    #endif
  }
  char msg[128];
  char detail_msg[128];
 
  memcpy(msg, ptr, resp->msg_len);
  msg[resp->msg_len] = '\0';
  ptr += resp->msg_len;

  memcpy(detail_msg, ptr, resp->detail_msg_len);
  detail_msg[resp->detail_msg_len] = '\0';
  ptr += resp->detail_msg_len;

  #ifdef TSDB_QUERY_LOGGING
    fprintf(query_log_fp,"Message: %s, Detail_Message: %s\n", msg, detail_msg);
  #endif

} 
int parse_resp_for_err(void *resp_buffer, TSDBDataCall *tsdb_dc_ptr)
{
  TSDB_ErrorMessage_t *resp = (TSDB_ErrorMessage_t *)(resp_buffer);

  #ifdef TSDB_QUERY_LOGGING
    fprintf(query_log_fp,"\nMessage hdr. size: %d, opcode: %d\n", resp->msg_hdr.msg_size, resp->msg_hdr.opcode);
    fprintf(query_log_fp,"Query Head: %d, TSDB_Count: %d \n", resp->rt_hdr.qhead_rt, resp->rt_hdr.tsdb_nodes);
  #endif
  //int error_code = resp->error_code;
  //short http_code = resp->http_code;
  void *var_data = resp->var_data;
  
  #ifdef TSDB_QUERY_LOGGING
    fprintf(query_log_fp,"TSDB rt:\n");
  #endif
  for(int i = 0; i < resp->rt_hdr.tsdb_nodes; i++)
  {
    short *tsdb_id = (short *)var_data;
    var_data += 2;

    int *tsdb_rt = (int *)var_data;
    var_data += 4;
    #ifdef TSDB_QUERY_LOGGING
      fprintf(query_log_fp,"TSDB id: %d, TSDB rt: %d \n", *tsdb_id, *tsdb_rt);
    #endif
  }
  
  //char err_msg[256];
  //char detail_err_msg[128];
  uint16_t len;  

  uint16_t *err_msg_len = (uint16_t *)var_data;
  var_data += 2;
  len = *err_msg_len;

 if(*err_msg_len > 64)
  len = 64;
  memcpy(tsdb_dc_ptr->err_msg, var_data, len);
  tsdb_dc_ptr->err_msg[len] = '\0';
  var_data += *err_msg_len;

  uint16_t *detail_err_msg_len = (uint16_t *)var_data;
  var_data += 2;
  len = *detail_err_msg_len;
  if(*detail_err_msg_len > 128)
  len = 128;
  memcpy(tsdb_dc_ptr->detail_err_msg, var_data, len);
  tsdb_dc_ptr->detail_err_msg[len] = '\0';
  var_data += *detail_err_msg_len;
  #ifdef TSDB_QUERY_LOGGING
  fprintf(query_log_fp,"Error Code: %d, Http Code: %d, ErrorMsg: %s, DetailErrMsg = %s\n",
    resp->error_code, resp->http_code, tsdb_dc_ptr->err_msg, tsdb_dc_ptr->detail_err_msg);
  #endif
  return(resp->error_code);
}

void tsdb_parse_response(void  *resp_buffer, int msg_size, TSDBDataCall *tsdb_dc_ptr)
{
  MsgHdr_t *hdr = (MsgHdr_t *)(resp_buffer);
  int tx_name_offset = 0;

  tx_name_offset = hdr->tx_name_offset;
  void *tx_ptr = resp_buffer;
  tx_ptr += tx_name_offset;

  uint8_t *tx_len = (uint8_t *)tx_ptr;
  tx_ptr++;
  
  char tx_name[1024 + 1];
  memcpy(tx_name, tx_ptr, *tx_len);
  tx_name[*tx_len] = '\0';

  fprintf(stderr, "TXName = %s, TXLen = %d\n\n", tx_name, tx_len);


  switch(hdr->opcode)
  {
    case TSDB_QUERY_REQ_ALERT_RULE_CONFIG:
      script_parse_alert_resp(resp_buffer, hdr->opcode);
      break;
    case TSDB_QUERY_ERROR: //todo check this
      tsdb_dc_ptr->rep_error_code = parse_resp_for_err(resp_buffer, tsdb_dc_ptr);
      //fprintf(query_log_fp, "Got TSDB ERRROR Opcode: %d\n", hdr->opcode);
      break;
    default:
      tsdb_dc_ptr->rep_error_code = 9999; //  TODO - get from eror message
      fprintf(query_log_fp, "Invalid msg type in RESPONSE: %d\n", hdr->opcode);
  }
}

