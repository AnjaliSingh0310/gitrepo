#!/bin/bash
function get_metric_details()
{
  export MG_ID=$(grep "Measure:" ${RESPONSE_FILE} | cut -d'>' -f2 | cut -d':' -f3)
  export GRAPH_ID=$(grep "Measure:" ${RESPONSE_FILE} | cut -d'>' -f3 | cut -d':' -f3)
  export GRAPH_NAME=$(grep "Measure:" ${RESPONSE_FILE} | cut -d'>' -f3 | cut -d':' -f2)
  GDF_NAME=$(grep "$MG_ID" $NS_WDIR/sys/*.gdf | cut -d':' -f1 | awk -F'/' '{print $NF}')
  export FORMULA=$(grep "^Graph.*|$GRAPH_ID|" $NS_WDIR/sys/$GDF_NAME | awk -F"|" '{print $7}')
  #RANGE=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F',' '{print $NF}' | cut -d'|' -f${GRAPH_ID})
  #export MIN_VALUE=$(echo $RANGE | cut -d':' -f1)
  #export MAX_VALUE=$(echo $RANGE | cut -d':' -f2)
  automation_log "MG_ID=$MG_ID"
  automation_log "GRAPH_ID=$GRAPH_ID"
  automation_log "GDF_NAME=$GDF_NAME"
  automation_log "FORMULA=$FORMULA"
}
function get_data_type_info()
{
  start_index=$(grep "$GRAPH_NAME" $DATACALL_LIB/data_type_info.txt | cut -d"|" -f2)
  #echo "start_index=$start_index"
  element_count=$(grep "$GRAPH_NAME" $DATACALL_LIB/data_type_info.txt | cut -d"|" -f3)
  #echo "element_count=$element_count"

  if [ $element_count -eq 1 ];then
    avg=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f${start_index} | awk -F":" '{print $1}')
  #  automation_log "avg=$avg"
  elif [ $element_count -eq 2 ];then
    avg=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f${start_index} | awk -F":" '{print $1}')
    count=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 1)) | awk -F":" '{print $1}')
  elif [ $element_count -eq 4 ];then
	  avg=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f${start_index} | awk -F":" '{print $1}')
	  min=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 1)) | awk -F":" '{print $1}')
	  max=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 2)) | awk -F":" '{print $1}')
	  count=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 3)) | awk -F":" '{print $1}')
  elif [ $element_count -eq 5 ];then
	  avg=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f${start_index} | awk -F":" '{print $1}')
	  min=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 1)) | awk -F":" '{print $1}')
	  max=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 2)) | awk -F":" '{print $1}')
	  count=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 3)) | awk -F":" '{print $1}')
	  sumsq=$(grep "$GDF_NAME" $DATACALL_LIB/GDFConfig.txt.seq | awk -F"," '{print $10}' | cut -d"|" -f$((start_index + 4)) | awk -F":" '{print $1}')
#	  automation_log "ingested data = $avg | $min | $max | $count | $sumsq"
  fi
  automation_log "ingested data = $avg | $min | $max | $count | $sumsq"

}
function set_expected_values()
{
  expected_avg=0
  expected_min=0
  expected_max=0
  min_expected_count=0
  max_expected_count=0
  expected_count=0
  expected_sumsq=0  
  if [ $element_count -eq 1 ];then
    if [ "$FORMULA" == "PS" ] || [ "$FORMULA" == "CumToPS" ];then
      expected_avg=$(echo "scale=6; $avg/$NF" | bc -l | cut -d'.' -f1)
    elif [ "$FORMULA" == "PM" ] || [ "$FORMULA" == "CumToPM" ];then
      avg_ps=$(echo "$avg/$NF" | bc -l)
      avg_pm=$(echo "scale=2; 60 * ${avg_ps}" | bc -l | cut -d'.' -f1)
      expected_avg=${avg_pm}
    else
      expected_avg=$(echo $avg | cut -d'.' -f1)
    fi
    automation_log "expected_avg=$expected_avg"
  fi

  if [ $element_count -eq 2 ];then
    tmp_count=$count
       i=$((SF/NF))
       if [ $i -gt 1 ];then
	 min_expected_count=`expr $((tmp_count*i)) - $((tmp_count*2))`
	 max_expected_count=$((tmp_count*i))
       fi
       if [ $i -eq 1 ];then
	 min_expected_count=$((tmp_count*i))
         max_expected_count=$((tmp_count*i))
       fi
       automation_log "min_expected_count=$min_expected_count | max_expected_count=$max_expected_count"
    if [ "$FORMULA" == "PS" ] || [ "$FORMULA" == "CumToPS" ];then
      expected_avg=$(echo "scale=6; $avg/$NF" | bc -l | cut -d'.' -f1)
    elif [ "$FORMULA" == "PM" ] || [ "$FORMULA" == "CumToPM" ];then
      avg_ps=$(echo "$avg/$NF" | bc -l)
      avg_pm=$(echo "scale=2; 60 * ${avg_ps}" | bc -l | cut -d'.' -f1)
      expected_avg=${avg_pm}
    else
      expected_avg=$(echo $avg | cut -d'.' -f1)
    fi
    automation_log "expected_avg=$expected_avg"
  fi

   if [ $element_count -eq 4 ];then
     tmp_count=$count
	i=$((SF/NF))
	if [ $i -gt 1 ];then
          min_expected_count=`expr $((tmp_count*i)) - $((tmp_count*2))`
          max_expected_count=$((tmp_count*i))
        fi
        if [ $i -eq 1 ];then
          min_expected_count=$((tmp_count*i))
          max_expected_count=$((tmp_count*i))
        fi

    if [ "$FORMULA" == "PS" ] || [ "$FORMULA" == "CumToPS" ];then
      expected_avg=$(echo "scale=6; $avg/$NF" | bc -l | cut -d'.' -f1)
      expected_min=$(echo "scale=6; $min/$NF" | bc -l | cut -d'.' -f1)
      expected_max=$(echo "scale=6; $max/$NF" | bc -l | cut -d'.' -f1)
    elif [ "$FORMULA" == "PM" ] || [ "$FORMULA" == "CumToPM" ];then
      avg_ps=$(echo "$avg/$NF" | bc -l)
      min_ps=$(echo "$min/$NF" | bc -l)
      max_ps=$(echo "$max/$NF" | bc -l)

      avg_pm=$(echo "scale=2; 60 * ${avg_ps}" | bc -l | cut -d'.' -f1)
      min_pm=$(echo "scale=2; 60 * ${min_ps}" | bc -l | cut -d'.' -f1)
      max_pm=$(echo "scale=2; 60 * ${max_ps}" | bc -l | cut -d'.' -f1)

      expected_avg=${avg_pm}
      expected_min=${min_pm}
      expected_max=${max_pm}
    else
      expected_avg=$(echo $avg| cut -d'.' -f1)
      expected_min=$(echo $min| cut -d'.' -f1)
      expected_max=$(echo $max| cut -d'.' -f1)
    fi
    automation_log "min_expected_count=$min_expected_count | max_expected_count=$max_expected_count | expected_avg=$expected_avg | expected_min=$expected_min | expected_max=$expected_max"
  fi
 if [ $element_count -eq 5 ];then
     tmp_count=$count
       i=$((SF/NF))
       if [ $i -gt 1 ];then
          min_expected_count=`expr $((tmp_count*i)) - $((tmp_count*2))`
          max_expected_count=$((tmp_count*i))
       fi
       if [ $i -eq 1 ];then
	  min_expected_count=$((tmp_count*i))
          max_expected_count=$((tmp_count*i))
       fi
    if [ "$FORMULA" == "PS" ] || [ "$FORMULA" == "CumToPS" ];then
      expected_avg=$(echo "scale=6; $avg/$NF" | bc -l | cut -d'.' -f1)
      expected_min=$(echo "scale=6; $min/$NF" | bc -l | cut -d'.' -f1)
      expected_max=$(echo "scale=6; $max/$NF" | bc -l | cut -d'.' -f1)
      expected_sumsq=$(echo "scale=6; $sumsq/$NF" | bc -l | cut -d'.' -f1)
    elif [ "$FORMULA" == "PM" ] || [ "$FORMULA" == "CumToPM" ];then
      avg_ps=$(echo "$avg/$NF" | bc -l)
      min_ps=$(echo "$min/$NF" | bc -l)
      max_ps=$(echo "$max/$NF" | bc -l)
      sumsq_ps=$(echo "$sumsq/$NF" | bc -l)

      avg_pm=$(echo "scale=2; 60 * ${avg_ps}" | bc -l | cut -d'.' -f1)
      min_pm=$(echo "scale=2; 60 * ${min_ps}" | bc -l | cut -d'.' -f1)
      max_pm=$(echo "scale=2; 60 * ${max_ps}" | bc -l | cut -d'.' -f1)
      sumsq_pm=$(echo "scale=2; 60 * ${sumsq_ps}" | bc -l | cut -d'.' -f1)

      expected_avg=${avg_pm}
      expected_min=${min_pm}
      expected_max=${max_pm}
      expected_sumsq=${sumsq_pm}
    else
      expected_avg=$avg
      expected_min=$min
      expected_max=$max
      expected_sumsq=$sumsq
    fi
    automation_log "min_expected_count=$min_expected_count | max_expected_count=$max_expected_count | expected_avg=$expected_avg | expected_min=$expected_min | expected_max=$expected_max | expected_sumsq=$expected_sumsq"
  fi
}
function validate_data_type()
{
  get_metric_details
  get_data_type_info
  set_expected_values
  
  #echo "expected_avg=$expected_avg"
  #echo "expected_min=$expected_min"
  #echo "expected_max=$expected_max"
  #echo "minimum count expected=$min_expected_count"
  #echo "maximum count expected=$max_expected_count"
  #echo "expected_count=$expected_count"
  #echo "expected_sumsq=$expected_sumsq"

  data_sln=$(($(grep -n "^Data:" ${RESPONSE_FILE} | cut -d':' -f1)+ 4))
  data_eln=$((data_sln + ACT_SC))

  export DATA_AVG_ARR=($(awk -v sln=$data_sln -v eln=$data_eln 'NR==sln , NR==eln' ${RESPONSE_FILE} | awk '{print $8}' | xargs))
  export DATA_MIN_ARR=($(awk -v sln=$data_sln -v eln=$data_eln 'NR==sln , NR==eln' ${RESPONSE_FILE} | awk '{print $9}' | xargs))
  export DATA_MAX_ARR=($(awk -v sln=$data_sln -v eln=$data_eln 'NR==sln , NR==eln' ${RESPONSE_FILE} | awk '{print $10}' | xargs))
  export DATA_COUNT_ARR=($(awk -v sln=$data_sln -v eln=$data_eln 'NR==sln , NR==eln' ${RESPONSE_FILE} | awk '{print $11}' | xargs))
  export DATA_SUMSQ_ARR=($(awk -v sln=$data_sln -v eln=$data_eln 'NR==sln , NR==eln' ${RESPONSE_FILE} | awk '{print $13}' | xargs))

  min_flag=0
  max_flag=0
  avg_flag=0
  count_flag=0
  faulty_sample_count=0
  nan_count=0
 # nan_threshold=$(((sample_count * 20)/100))
  itr_count=0

#  if [ $int_mdmode -eq 0 ];then
  while [ $itr_count -lt $ACT_SC ]
  do
    min_flag=0
    max_flag=0
    avg_flag=0
    count_flag=0
    sumsq_flag=0

    d_min=$(echo ${DATA_MIN_ARR[itr_count]} | cut -d"." -f1)
    d_max=$(echo ${DATA_MAX_ARR[itr_count]} | cut -d"." -f1)
    d_avg=$(echo ${DATA_AVG_ARR[itr_count]} | cut -d"." -f1)
    d_count=$(echo ${DATA_COUNT_ARR[itr_count]} | cut -d"." -f1)
    d_sumsq=$(echo ${DATA_SUMSQ_ARR[itr_count]} | cut -d"." -f1)

    automation_log "d_min=$d_min | d_max=$d_max | d_avg=$d_avg | d_count=$d_count | d_sumsq=$d_sumsq"

    exp_sumsq=$(echo "scale=6; $expected_sumsq*$d_count" | bc -l | cut -d"." -f1)
    #echo "expected_sumsq=$exp_sumsq"
   #check for nan
   if [ "$d_min" == "nan" ] || [ "$d_max" == "nan" ] || [ "$d_avg" == "nan" ] || [ "$d_count" == "nan" ];then
      nan_count=$(( nan_count + 1 ))
   else
      if [ $element_count -eq 1 ];then 
        if [ "${d_avg}" != "${expected_avg}" ];then
           ERR_MSG="exp_avg = ${expected_avg} act_avg=${d_avg}\n"
        fi
      fi
      #echo "avg_flag=$avg_flag"

      if [ $element_count -eq 2 ];then
	if [ "${d_avg}" != "${expected_avg}" ];then
	   ERR_MSG="exp_avg = ${expected_avg} act_avg = ${d_avg}"
	fi
	if [ ${d_count} -lt ${min_expected_count} ] && [ ${d_count} -gt ${max_expected_count} ];then
           ERR_MSG="exp_count_range = ${min_expected_count}:${max_expected_count} act_count = ${d_count}"
        fi
      fi

       if [ $element_count -eq 4 ];then
	if [ "${d_avg}" != "${expected_avg}" ];then
           ERR_MSG="exp_avg = ${expected_avg} act_avg = ${d_avg}"
        fi
	if [ "${d_min}" != "${expected_min}" ];then
           ERR_MSG="exp_min = ${expected_min} act_min = ${d_min}"
        fi
	if [ "${d_max}" != "${expected_max}" ];then
           ERR_MSG="exp_max = ${expected_max} act_max = ${d_max}"
        fi
	if [ ${d_count} -lt ${min_expected_count} ] && [ ${d_count} -gt ${max_expected_count} ];then
           ERR_MSG="exp_count_range = ${min_expected_count}:${max_expected_count} act_count = ${d_count}"
        fi
       fi
      if [ $element_count -eq 5 ];then
	if [ "${d_avg}" != "${expected_avg}" ];then
           ERR_MSG="exp_avg = ${expected_avg} act_avg = ${d_avg}"
        fi
	if [ "${d_min}" != "${expected_min}" ];then
           ERR_MSG="exp_min = ${expected_min} act_min = ${d_min}"
        fi
	if [ "${d_max}" != "${expected_max}" ];then
           ERR_MSG="exp_max = ${expected_max} act_max = ${d_max}"
        fi
	if [ ${d_count} -lt ${min_expected_count} ] && [ ${d_count} -gt ${max_expected_count} ];then
           ERR_MSG="exp_count_range = ${min_expected_count}:${max_expected_count} act_count = ${d_count}"
        fi
	if [ "${d_sumsq}" != "${exp_sumsq}" ];then
           ERR_MSG="exp_count = ${exp_sumsq} act_count = ${d_sumsq}"
        fi
      fi
      #if [ $min_flag -ne 0 ] || [ $max_flag -ne 0 ] || [ $avg_flag -ne 0 ] || [ $count_flag -ne 0 ] || [ $sumsq_flag -ne 0 ];then
       # automation_log "faulty_sample_count=$((faulty_sample_count + 1))"
      #fi
   fi
   itr_count=$((itr_count + 1))
  done
  if [ ${#ERR_MSG} -gt 0 ];then
      echo "FAILED : $ERR_MSG"
   else
      echo "PASS"
   fi
 # fi
}
